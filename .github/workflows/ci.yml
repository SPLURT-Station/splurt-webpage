name: CI

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

permissions:
  contents: write # Allow writing to repository for auto-formatting

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
          cache: true

      - name: Install dependencies
        run: deno install -r --allow-scripts

      - name: Check TypeScript (Astro)
        run: deno run --allow-ffi --allow-scripts check

      - name: Check TypeScript (Deno)
        run: deno check

      - name: Lint code
        run: deno run --allow-ffi --allow-scripts lint

      - name: Format check and auto-fix
        run: |
          # Determine if we can auto-format based on event type and permissions
          can_auto_format=false

          if [ "${{ github.event_name }}" = "push" ]; then
            can_auto_format=true
            echo "‚úÖ Auto-format enabled: Push event"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            # Check if PR is from same repository (not a fork)
            if [ "${{ github.event.pull_request.head.repo.full_name }}" = "${{ github.repository }}" ]; then
              can_auto_format=true
              echo "‚úÖ Auto-format enabled: PR from same repository"
            # Check if maintainer can modify the PR
            elif [ "${{ github.event.pull_request.maintainer_can_modify }}" = "true" ]; then
              can_auto_format=true
              echo "‚úÖ Auto-format enabled: PR allows maintainer edits"
            else
              echo "‚ö†Ô∏è Auto-format disabled: PR from fork without maintainer edit permission"
            fi
          fi

          if [ "$can_auto_format" = "true" ]; then
            echo "Running format check with auto-fix enabled..."

            # Check if formatting is needed
            if ! deno fmt --check; then
              echo "‚ùå Code formatting issues detected. Auto-fixing..."

              # Configure git
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action Auto-Format"

              # Run formatter
              deno fmt

              # Check if there are changes to commit
              if git diff --quiet; then
                echo "‚úÖ No formatting changes needed after running deno fmt"
              else
                echo "üìù Committing formatting changes..."
                git add .
                git commit -m "Auto-format code with deno fmt [skip ci]"
                # Handle detached HEAD for PRs
                if [ "${{ github.event_name }}" = "pull_request" ]; then
                  echo "Pushing to PR branch: ${{ github.head_ref }}"
                  git push origin HEAD:${{ github.head_ref }}
                else
                  git push
                fi
                echo "‚úÖ Formatting changes committed and pushed"
              fi
            else
              echo "‚úÖ Code formatting is already correct"
            fi
          else
            echo "Running format check only (read-only mode)..."
            deno fmt --check
          fi

  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
          cache: true

      - name: Install dependencies
        run: deno install -r --allow-scripts

      - name: Build project
        run: deno run --allow-ffi --allow-scripts build

      - name: Check build output
        run: |
          if [ ! -d "dist" ]; then
            echo "Build failed: dist directory not found"
            exit 1
          fi
          echo "Build successful: dist directory created"
          ls -la dist/

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
          cache: true

      - name: Security audit
        run: |
          # Check for common security issues in dependencies
          deno info --json | jq '.modules[] | select(.specifier | contains("http://"))' && echo "Warning: Insecure HTTP imports found" || echo "No insecure HTTP imports found"

          # Additional security checks can be added here
          echo "Security audit completed"
