name: Deploy to VPS (Proxmox LXC)

on:
  push:
    branches: [master, main]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy:
    name: Build and Deploy to VPS
    runs-on: [self-hosted, splurt-webpage-production]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check Node.js installation and version
        id: check-node
        run: |
          if command -v node &> /dev/null; then
            echo "node-installed=true" >> $GITHUB_OUTPUT
            current_version=$(node --version | sed 's/v//')
            echo "current-version=$current_version" >> $GITHUB_OUTPUT
            echo "Node.js is installed - Current version: $current_version"

            # Get latest LTS version
            latest_lts=$(curl -s https://nodejs.org/dist/index.json | jq -r '[.[] | select(.lts != false)] | .[0].version' | sed 's/v//')
            echo "latest-lts=$latest_lts" >> $GITHUB_OUTPUT
            echo "Latest LTS version: $latest_lts"

            # Compare versions
            if [ "$current_version" = "$latest_lts" ]; then
              echo "needs-update=false" >> $GITHUB_OUTPUT
              echo "✅ Node.js is already on the latest LTS version"
            else
              echo "needs-update=true" >> $GITHUB_OUTPUT
              echo "⚠️ Node.js needs to be updated from $current_version to $latest_lts"
            fi
          else
            echo "node-installed=false" >> $GITHUB_OUTPUT
            echo "needs-update=true" >> $GITHUB_OUTPUT
            echo "Node.js is not installed"

            # Get latest LTS version for installation
            latest_lts=$(curl -s https://nodejs.org/dist/index.json | jq -r '[.[] | select(.lts != false)] | .[0].version' | sed 's/v//')
            echo "latest-lts=$latest_lts" >> $GITHUB_OUTPUT
            echo "Latest LTS version to install: $latest_lts"
          fi

      - name: Install or Update Node.js to Latest LTS
        if: steps.check-node.outputs.node-installed == 'false' || steps.check-node.outputs.needs-update == 'true'
        run: |
          echo "Installing/Updating Node.js to latest LTS version..."

          # Remove existing Node.js if present
          if command -v node &> /dev/null; then
            echo "Removing existing Node.js installation..."
            sudo apt-get remove -y nodejs npm
            sudo apt-get autoremove -y
          fi

          # Install latest LTS version
          echo "Installing Node.js LTS..."
          curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
          sudo apt-get install -y nodejs

          echo "Node.js LTS installed successfully:"
          node --version
          npm --version

          # Verify we got the expected version
          installed_version=$(node --version | sed 's/v//')
          expected_version="${{ steps.check-node.outputs.latest-lts }}"
          echo "Expected: $expected_version, Installed: $installed_version"

      - name: Check Deno installation
        id: check-deno
        run: |
          if command -v deno &> /dev/null; then
            echo "deno-installed=true" >> $GITHUB_OUTPUT
            echo "Deno is already installed:"
            deno --version
          else
            echo "deno-installed=false" >> $GITHUB_OUTPUT
            echo "Deno is not installed"
          fi

      - name: Install Deno via npm
        if: steps.check-deno.outputs.deno-installed == 'false'
        run: |
          echo "Installing Deno via npm..."
          npm install -g deno
          echo "Deno installed successfully:"
          deno --version

      - name: Check for Deno updates
        run: |
          echo "Checking for Deno updates..."
          if deno upgrade --dry-run 2>&1 | grep -q "Local deno version"; then
            echo "Deno is up to date"
          else
            echo "Updating Deno..."
            deno upgrade
            echo "Deno updated successfully:"
            deno --version
          fi

      - name: Install dependencies
        run: deno install -r --allow-scripts

      - name: Build application
        run: deno run -r --allow-all build

      - name: Deployment complete
        run: |
          echo "✅ Build completed successfully!"
          echo "Application built and ready at: $(pwd)/dist"
