name: Check Deno Updates

on:
  schedule:
    # Run monthly on the 1st at 10 AM UTC
    - cron: "0 10 1 * *"
  workflow_dispatch:

permissions:
  issues: write

jobs:
  check-deno-version:
    name: Check Deno Runtime Updates
    runs-on: ubuntu-latest

    steps:
      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Check current Deno version
        id: current
        run: |
          CURRENT_VERSION=$(deno --version | head -n1 | cut -d' ' -f2)
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current Deno version: $CURRENT_VERSION"

      - name: Check for newer Deno versions
        id: check
        run: |
          echo "🔍 Checking for Deno updates..."

          # Get latest stable version from GitHub API
          LATEST_VERSION=$(curl -s https://api.github.com/repos/denoland/deno/releases/latest | grep '"tag_name":' | cut -d'"' -f4 | sed 's/v//')
          CURRENT_VERSION="${{ steps.current.outputs.current }}"

          echo "Latest stable version: $LATEST_VERSION"
          echo "Current version: $CURRENT_VERSION"

          if [ "$LATEST_VERSION" != "$CURRENT_VERSION" ]; then
            echo "update_available=true" >> $GITHUB_OUTPUT
            echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            echo "🆙 Deno update available: $CURRENT_VERSION → $LATEST_VERSION"
          else
            echo "update_available=false" >> $GITHUB_OUTPUT
            echo "✅ Deno is up to date!"
          fi

      - name: Create issue for Deno update
        if: steps.check.outputs.update_available == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const currentVersion = '${{ steps.current.outputs.current }}';
            const latestVersion = '${{ steps.check.outputs.latest_version }}';

            // Check if there's already an open issue for Deno updates
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'deno-update'
            });

            if (issues.length === 0) {
              const body = `## 🆙 Deno Runtime Update Available

            A new version of Deno is available!

            ### Version Information
            - **Current Version**: \`${currentVersion}\`
            - **Latest Version**: \`${latestVersion}\`

            ### Update Instructions

            To update Deno manually, run:
            \`\`\`bash
            deno upgrade
            \`\`\`

            Or to update to a specific version:
            \`\`\`bash
            deno upgrade ${latestVersion}
            \`\`\`

            ### CI/CD Considerations

            After updating Deno locally, consider updating the CI workflows to use the new version:
            1. Update \`.github/workflows/*.yml\` files
            2. Change \`deno-version: v2.x\` to pin to the specific version if needed
            3. Test all workflows with the new version

            ### Release Notes
            Check the [Deno releases page](https://github.com/denoland/deno/releases/tag/v${latestVersion}) for changelog and breaking changes.

            ---
            *This issue was created automatically by the Deno update checker workflow.*`;

              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Update Deno runtime to v${latestVersion}`,
                body: body,
                labels: ['deno-update', 'enhancement']
              });
              
              console.log('Created issue for Deno update');
            } else {
              console.log('Issue for Deno update already exists');
            }
